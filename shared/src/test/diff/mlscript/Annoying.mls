:NoJS
// :NoProvs


// def test: (int | { x: 'a } | { y: 'a }) -> 'a
def test: (int & { f: 'a } | { x: 'a } | { y: 'a }) -> 'a
//│ test: anything -> nothing

:e
def test x = case x of { int -> x.f | _ -> x.x }
//│ (Object & {x: 'f} & ~int | int & {f: 'f}) -> 'f
//│   <:  test:
//│ anything -> nothing
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.10: 	def test x = case x of { int -> x.f | _ -> x.x }
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `{x: 'a}` does not match type `Object & ?a & ~int | int & ?b`
//│ ║  l.6: 	def test: (int & { f: 'a } | { x: 'a } | { y: 'a }) -> 'a
//│ ║       	                             ^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.10: 	def test x = case x of { int -> x.f | _ -> x.x }
//│ ╙──      	                  ^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.10: 	def test x = case x of { int -> x.f | _ -> x.x }
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `int & {x: 'a} | {x: 'a} & ~Object | {x: 'a} & ~?a` does not have field 'f'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.10: 	def test x = case x of { int -> x.f | _ -> x.x }
//│ ║        	                                ^^^
//│ ╟── from refined scrutinee:
//│ ║  l.10: 	def test x = case x of { int -> x.f | _ -> x.x }
//│ ╙──      	                  ^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.10: 	def test x = case x of { int -> x.f | _ -> x.x }
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `int & {x: 'a} | {x: 'a} & ~Object | {x: 'a} & ~?a` does not have field 'f'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.10: 	def test x = case x of { int -> x.f | _ -> x.x }
//│ ║        	                                ^^^
//│ ╟── from refined scrutinee:
//│ ║  l.10: 	def test x = case x of { int -> x.f | _ -> x.x }
//│ ╙──      	                  ^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.10: 	def test x = case x of { int -> x.f | _ -> x.x }
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `{y: 'a}` does not match type `Object & ?a & ~int | int & ?b`
//│ ║  l.6: 	def test: (int & { f: 'a } | { x: 'a } | { y: 'a }) -> 'a
//│ ║       	                                         ^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.10: 	def test x = case x of { int -> x.f | _ -> x.x }
//│ ╙──      	                  ^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.10: 	def test x = case x of { int -> x.f | _ -> x.x }
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `{y: 'a} & ~int` does not have field 'x'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.10: 	def test x = case x of { int -> x.f | _ -> x.x }
//│ ╙──      	                                           ^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.10: 	def test x = case x of { int -> x.f | _ -> x.x }
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `int & {y: 'a} | {y: 'a} & ~Object | {y: 'a} & ~?a` does not have field 'f'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.10: 	def test x = case x of { int -> x.f | _ -> x.x }
//│ ║        	                                ^^^
//│ ╟── from refined scrutinee:
//│ ║  l.10: 	def test x = case x of { int -> x.f | _ -> x.x }
//│ ╙──      	                  ^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.10: 	def test x = case x of { int -> x.f | _ -> x.x }
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `int & {y: 'a} | {y: 'a} & ~Object | {y: 'a} & ~?a` does not have field 'f'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.10: 	def test x = case x of { int -> x.f | _ -> x.x }
//│ ║        	                                ^^^
//│ ╟── from refined scrutinee:
//│ ║  l.10: 	def test x = case x of { int -> x.f | _ -> x.x }
//│ ╙──      	                  ^

// Note: not an error, but a terminating `test` can't be implemented
test 1
//│ res: nothing

test { x = 1 }
//│ res: nothing

test { y = 1 }
//│ res: nothing


class A: { }
class B: { }
class C: { }
//│ Defined class A
//│ Defined class B
//│ Defined class C

def test: (A & { a: 'a } | B & { b: 'a } | C & { c: 'a }) -> 'a
//│ test: (A & {a: 'a} | B & {b: 'a} | C & {c: 'a}) -> 'a

test (error: A & { a: int })
test (error: B & { b: int })
test (error: C & { c: int })
//│ res: int
//│ res: int
//│ res: int

:e
test (error: B & { c: int })
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.109: 	test (error: B & { c: int })
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `B & {c: int}` does not match type `A & {a: ?a} | B & {b: ?a} | C & {c: ?a}`
//│ ║  l.109: 	test (error: B & { c: int })
//│ ║         	             ^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.98: 	def test: (A & { a: 'a } | B & { b: 'a } | C & { c: 'a }) -> 'a
//│ ╙──      	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error


def test: (A & { x: 'a; y: 'b } | B & { x: 'a; y: 'b } | C & { x: 'a; y: 'b }) -> { l: 'a; r: 'b }
//│ test: (A & {x: 'a, y: 'b} | B & {x: 'a, y: 'b} | C & {x: 'a, y: 'b}) -> {l: 'a, r: 'b}

test (error: A & { x: int; y: string })
test (error: B & { x: int; y: string })
test (error: C & { x: int; y: string })
//│ res: {l: int, r: string}
//│ res: {l: int, r: string}
//│ res: {l: int, r: string}

:e
test (error: A & { x: int })
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.133: 	test (error: A & { x: int })
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `A & {x: int}` does not match type `A & {x: ?a, y: ?b} | B & {x: ?a, y: ?b} | C & {x: ?a, y: ?b}`
//│ ║  l.133: 	test (error: A & { x: int })
//│ ║         	             ^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.122: 	def test: (A & { x: 'a; y: 'b } | B & { x: 'a; y: 'b } | C & { x: 'a; y: 'b }) -> { l: 'a; r: 'b }
//│ ╙──       	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error | {l: int, r: nothing}


def test: (A & { xA: 'a; yA: 'b } | B & { xB: 'a; yB: 'b } | C & { xC: 'a; yC: 'b }) -> { l: 'a; r: 'b }
//│ test: (A & {xA: 'a, yA: 'b} | B & {xB: 'a, yB: 'b} | C & {xC: 'a, yC: 'b}) -> {l: 'a, r: 'b}

test (error: A & { xA: int; yA: string })
test (error: B & { xB: int; yB: string })
test (error: C & { xC: int; yC: string })
//│ res: {l: int, r: string}
//│ res: {l: int, r: string}
//│ res: {l: int, r: string}


def negInt: ~int
//│ negInt: ~int

:e
negInt: A | { x: 'a }
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.161: 	negInt: A | { x: 'a }
//│ ║         	^^^^^^
//│ ╟── type `~int` does not match type `A | {x: ?a}`
//│ ║  l.157: 	def negInt: ~int
//│ ║         	            ^^^^
//│ ╟── but it flows into reference with expected type `A | {x: ?a}`
//│ ║  l.161: 	negInt: A | { x: 'a }
//│ ║         	^^^^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.161: 	negInt: A | { x: 'a }
//│ ╙──       	        ^^^^^^^^^^^^^
//│ res: A | {x: nothing}

def negWeird: ~(~(~(A & { x: int })))
//│ negWeird: ~(A & {x: int})

def v = negWeird
//│ v: ~(A & {x: int})

:e
v: A | { x: 'a }
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.183: 	v: A | { x: 'a }
//│ ║         	^
//│ ╟── type `~(A & {x: int})` does not match type `A | {x: ?a}`
//│ ║  l.176: 	def negWeird: ~(~(~(A & { x: int })))
//│ ║         	              ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `A | {x: ?a}`
//│ ║  l.183: 	v: A | { x: 'a }
//│ ║         	^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.183: 	v: A | { x: 'a }
//│ ╙──       	   ^^^^^^^^^^^^^
//│ res: A | {x: nothing}


:e
w: A | { x: 'a }
//│ ╔══[ERROR] identifier not found: w
//│ ║  l.200: 	w: A | { x: 'a }
//│ ╙──       	^
//│ res: A | {x: nothing}

def v: {x: 1} & ~{x: int}
v: { x: 'a }
//│ v: nothing
//│ res: {x: nothing}

def v: A & {x: 1} & ~{x: int}
v: A & { x: 'a }
//│ v: nothing
//│ res: A & {x: nothing}


:e
(error: { x: int }): int | string
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.218: 	(error: { x: int }): int | string
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ╟── type `{x: int}` does not match type `int | string`
//│ ║  l.218: 	(error: { x: int }): int | string
//│ ║         	        ^^^^^^^^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.218: 	(error: { x: int }): int | string
//│ ╙──       	                     ^^^^^^^^^^^^
//│ res: int | string


idx = id
//│ idx: 'a -> 'a

:e
idx idx.x
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.235: 	idx idx.x
//│ ║         	    ^^^^^
//│ ╟── reference of type `?a -> ?a` does not have field 'x'
//│ ║  l.231: 	idx = id
//│ ║         	      ^^
//│ ╟── but it flows into reference with expected type `{x: ?x}`
//│ ║  l.235: 	idx idx.x
//│ ╙──       	    ^^^
//│ res: error

def indirect i = i i.x
//│ indirect: ('x -> 'a & {x: 'x}) -> 'a

:e
indirect idx
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.251: 	indirect idx
//│ ║         	^^^^^^^^^^^^
//│ ╟── reference of type `?a -> ?a` does not have field 'x'
//│ ║  l.231: 	idx = id
//│ ║         	      ^^
//│ ╟── but it flows into reference with expected type `{x: ?x}`
//│ ║  l.251: 	indirect idx
//│ ║         	         ^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.247: 	def indirect i = i i.x
//│ ║         	                   ^^^
//│ ╟── from reference:
//│ ║  l.247: 	def indirect i = i i.x
//│ ╙──       	                   ^
//│ res: error

if true then id else idx
//│ res: 'a -> 'a

r =  if true then id else idx
//│ r: 'a -> 'a

:e
r r.x
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.276: 	r r.x
//│ ║         	  ^^^
//│ ╟── reference of type `?a -> ?a` does not have field 'x'
//│ ║  l.272: 	r =  if true then id else idx
//│ ║         	                  ^^
//│ ╟── but it flows into reference with expected type `{x: ?x}`
//│ ║  l.276: 	r r.x
//│ ╙──       	  ^
//│ res: error

:e
indirect r
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.289: 	indirect r
//│ ║         	^^^^^^^^^^
//│ ╟── reference of type `?a -> ?a` does not have field 'x'
//│ ║  l.272: 	r =  if true then id else idx
//│ ║         	                  ^^
//│ ╟── but it flows into reference with expected type `{x: ?x}`
//│ ║  l.289: 	indirect r
//│ ║         	         ^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.247: 	def indirect i = i i.x
//│ ║         	                   ^^^
//│ ╟── from reference:
//│ ║  l.247: 	def indirect i = i i.x
//│ ╙──       	                   ^
//│ res: error

def takeFunOrRecord: (int -> int | { x: int }) -> int
//│ takeFunOrRecord: anything -> int

:pe
takeFunOrRecord x = case x of { { x = v } -> 0 | _ -> 1 }
//│ /!\ Parse error: Expected "}":1:33, found "{ x = v } " at l.311:33: takeFunOrRecord x = case x of { { x = v } -> 0 | _ -> 1 }

:pe
takeFunOrRecord x = case x of { { x } -> 0 | _ -> 1 }
//│ /!\ Parse error: Expected "}":1:33, found "{ x } -> 0" at l.315:33: takeFunOrRecord x = case x of { { x } -> 0 | _ -> 1 }

:pe
takeFunOrRecord x = case x of { (int -> int) -> 0 | _ -> 1 }
//│ /!\ Parse error: Expected "}":1:33, found "(int -> in" at l.319:33: takeFunOrRecord x = case x of { (int -> int) -> 0 | _ -> 1 }

:pe
takeFunOrRecord x = case x of { (->) -> 0 | _ -> 1 }
//│ /!\ Parse error: Expected "}":1:33, found "(->) -> 0 " at l.323:33: takeFunOrRecord x = case x of { (->) -> 0 | _ -> 1 }


class AA
trait TT
def ty: AA | 'a
def ty2: TT & { x: int }
// def ty: AA | (int -> int)
//│ Defined class AA
//│ Defined trait TT
//│ ty: AA
//│ ty2: TT & {x: int}

:e
ty = ty2
//│ TT & {x: int}
//│   <:  ty:
//│ AA
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.338: 	ty = ty2
//│ ║         	^^^^^^^^
//│ ╟── type `TT & {x: int}` does not match type `AA | 'a`
//│ ║  l.330: 	def ty2: TT & { x: int }
//│ ║         	         ^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `AA | 'a`
//│ ║  l.338: 	ty = ty2
//│ ║         	     ^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.329: 	def ty: AA | 'a
//│ ╙──       	        ^^^^^^^


