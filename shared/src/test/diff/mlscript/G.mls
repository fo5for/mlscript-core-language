
// * Examples of errors due to approximation in the absence of first-class polymorphism.
// * These tend to show up as "spurious" flows in type error messages.


// G1
def z f x = x
//│ z: anything -> 'a -> 'a
//│  = [Function: z]

// G2
def s n f x = f (n f x)
//│ s: ('a -> 'b -> 'c) -> ('c -> 'd & 'a) -> 'b -> 'd
//│  = [Function: s]

// G3
n3 = s (s (s z))
//│ n3: ('a -> ('a & 'b)) -> 'a -> 'b
//│   = [Function (anonymous)]

def n3_ty: ('a -> 'a) -> ('a -> 'a)
//│ n3_ty: ('a -> 'a) -> 'a -> 'a
//│      = <missing implementation>

n3_ty = n3
//│ ('a -> ('a & 'b)) -> 'a -> 'b
//│   <:  n3_ty:
//│ ('a -> 'a) -> 'a -> 'a
//│      = [Function (anonymous)]


type Pair[A, B] = (A, B)
//│ Defined type alias Pair[+A, +B]

def fst: Pair['a, 'b] -> 'a
//│ fst: Pair['a, ?] -> 'a
//│    = <missing implementation>


:e
fst (fst (n3 (fun x -> (x, 0)) 1))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.41: 	fst (fst (n3 (fun x -> (x, 0)) 1))
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `1` is not a 2-element tuple
//│ ║  l.41: 	fst (fst (n3 (fun x -> (x, 0)) 1))
//│ ║        	                               ^
//│ ╟── but it flows into reference with expected type `(?a, ?b,)`
//│ ║  l.41: 	fst (fst (n3 (fun x -> (x, 0)) 1))
//│ ║        	                        ^
//│ ╟── Note: constraint arises from tuple type:
//│ ║  l.32: 	type Pair[A, B] = (A, B)
//│ ║        	                  ^^^^^^
//│ ╟── from applied type reference:
//│ ║  l.35: 	def fst: Pair['a, 'b] -> 'a
//│ ╙──      	         ^^^^^^^^^^^^
//│ res: error | 'a
//│   where
//│     'a :> 1 | ('a, 0,)
//│    = <no result>
//│      fst is not implemented

fst (n3 (fun x -> (x, 0)) 1)
//│ res: 'a
//│   where
//│     'a :> 1 | ('a, 0,)
//│    = <no result>
//│      fst is not implemented

:e
fst (fst (fst (n3 (fun x -> (x, 0)) 1)))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.71: 	fst (fst (fst (n3 (fun x -> (x, 0)) 1)))
//│ ║        	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `1` is not a 2-element tuple
//│ ║  l.71: 	fst (fst (fst (n3 (fun x -> (x, 0)) 1)))
//│ ║        	                                    ^
//│ ╟── but it flows into reference with expected type `(?a, ?b,)`
//│ ║  l.71: 	fst (fst (fst (n3 (fun x -> (x, 0)) 1)))
//│ ║        	                             ^
//│ ╟── Note: constraint arises from tuple type:
//│ ║  l.32: 	type Pair[A, B] = (A, B)
//│ ║        	                  ^^^^^^
//│ ╟── from applied type reference:
//│ ║  l.35: 	def fst: Pair['a, 'b] -> 'a
//│ ╙──      	         ^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.71: 	fst (fst (fst (n3 (fun x -> (x, 0)) 1)))
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `1` is not a 2-element tuple
//│ ║  l.71: 	fst (fst (fst (n3 (fun x -> (x, 0)) 1)))
//│ ║        	                                    ^
//│ ╟── but it flows into reference with expected type `(?a, ?b,)`
//│ ║  l.71: 	fst (fst (fst (n3 (fun x -> (x, 0)) 1)))
//│ ║        	                             ^
//│ ╟── Note: constraint arises from tuple type:
//│ ║  l.32: 	type Pair[A, B] = (A, B)
//│ ║        	                  ^^^^^^
//│ ╟── from applied type reference:
//│ ║  l.35: 	def fst: Pair['a, 'b] -> 'a
//│ ╙──      	         ^^^^^^^^^^^^
//│ res: error | 'a
//│   where
//│     'a :> 1 | ('a, 0,)
//│    = <no result>
//│      fst is not implemented


