:NoJS

:w
class Option[A]
class Some[A]: Option[A] & { payload: A }
class None[A]: Option[A]
//│ Defined class Option[±A]
//│ Defined class Some[+A]
//│ Defined class None[±A]
//│ ╔══[WARNING] Type definition None has bivariant type parameters:
//│ ║  l.6: 	class None[A]: Option[A]
//│ ║       	      ^^^^
//│ ╟── A is irrelevant and may be removed
//│ ║  l.6: 	class None[A]: Option[A]
//│ ╙──     	           ^
//│ ╔══[WARNING] Type definition Option has bivariant type parameters:
//│ ║  l.4: 	class Option[A]
//│ ║       	      ^^^^^^
//│ ╟── A is irrelevant and may be removed
//│ ║  l.4: 	class Option[A]
//│ ╙──     	             ^


:w
class List[A]
    method HeadOption: Option[A]
//│ Defined class List[±A]
//│ Declared List.HeadOption: List[?] -> Option[?]
//│ ╔══[WARNING] Type definition List has bivariant type parameters:
//│ ║  l.25: 	class List[A]
//│ ║        	      ^^^^
//│ ╟── A is irrelevant and may be removed
//│ ║  l.25: 	class List[A]
//│ ╙──      	           ^

:w
class Nil[A]: List[A]
    method HeadOption = None {}
//│ Defined class Nil[±A]
//│ Defined Nil.HeadOption: Nil[?] -> None[?]
//│ ╔══[WARNING] Type definition Nil has bivariant type parameters:
//│ ║  l.37: 	class Nil[A]: List[A]
//│ ║        	      ^^^
//│ ╟── A is irrelevant and may be removed
//│ ║  l.37: 	class Nil[A]: List[A]
//│ ╙──      	          ^

class Cons[A]: List[A] & { head: A; tail: List[A] }
    method HeadOption = Some { payload = error: A }
//│ Defined class Cons[+A]
//│ Defined Cons.HeadOption: Cons['A] -> Some['A]

// * Incur much fewer constraining/subtyping checks:
// class Cons[A]: List[A] & { head: A; tail: list }
// class Cons[A]: List[A] & { head: A; tail: anything }


:stats
l0 = Cons { head = 1; tail = Nil {} }
//│ l0: Cons[1] & {tail: Nil[?]}
//│ constrain calls  : 23
//│ annoying  calls  : 2
//│ subtyping calls  : 31

:stats
Cons.HeadOption l0
//│ res: Some[1]
//│ constrain calls  : 39
//│ annoying  calls  : 23
//│ subtyping calls  : 56

:stats
l1 = Cons { head = 1; tail = Cons { head = 2; tail = Cons { head = 3; tail = Nil {} } } }
//│ l1: Cons[1] & {tail: Cons[2] & {tail: Cons[3] & {tail: Nil[?]}}}
//│ constrain calls  : 59
//│ annoying  calls  : 6
//│ subtyping calls  : 87

:stats
Cons.HeadOption l1
//│ res: Some[1]
//│ constrain calls  : 39
//│ annoying  calls  : 23
//│ subtyping calls  : 56

:stats
l2 = Cons { head = 0; tail = l1 }
//│ l2: Cons[0] & {tail: Cons[1] & {tail: Cons[2] & {tail: Cons[3] & {tail: Nil[?]}}}}
//│ constrain calls  : 19
//│ annoying  calls  : 2
//│ subtyping calls  : 85

:stats
Cons.HeadOption l2
//│ res: Some[0]
//│ constrain calls  : 40
//│ annoying  calls  : 23
//│ subtyping calls  : 56

:stats
l3 = Cons { head = 0-1; tail = l2 }
//│ l3: Cons[int] & {tail: Cons[0] & {tail: Cons[1] & {tail: Cons[2] & {tail: Cons[3] & {tail: Nil[?]}}}}}
//│ constrain calls  : 37
//│ annoying  calls  : 2
//│ subtyping calls  : 103

:stats
Cons.HeadOption l3
//│ res: Some[int]
//│ constrain calls  : 46
//│ annoying  calls  : 23
//│ subtyping calls  : 59


:stats
rec def lr1 = Cons { head = 0; tail = lr1 }
//│ lr1: 'tail
//│   where
//│     'tail :> Cons[0] & {tail: 'tail}
//│ constrain calls  : 22
//│ annoying  calls  : 2
//│ subtyping calls  : 36

:stats
Cons.HeadOption lr1
//│ res: Some[0]
//│ constrain calls  : 39
//│ annoying  calls  : 21
//│ subtyping calls  : 46

:stats
rec def lr2 = Cons { head = 0; tail = Cons { head = 1; tail = Cons { head = 3; tail = lr2 } } }
//│ lr2: 'tail
//│   where
//│     'tail :> Cons[0] & {tail: Cons[1] & {tail: Cons[3] & {tail: 'tail}}}
//│ constrain calls  : 58
//│ annoying  calls  : 6
//│ subtyping calls  : 92

:stats
Cons.HeadOption lr2
//│ res: Some[0]
//│ constrain calls  : 40
//│ annoying  calls  : 23
//│ subtyping calls  : 56


:e
l1 = Cons { tail = Cons { tail = Cons { tail = Nil {} } } }
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.149: 	l1 = Cons { tail = Cons { tail = Cons { tail = Nil {} } } }
//│ ║         	                                 ^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── record literal of type `{tail: ?a}` does not have field 'head'
//│ ║  l.149: 	l1 = Cons { tail = Cons { tail = Cons { tail = Nil {} } } }
//│ ╙──       	                                      ^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.149: 	l1 = Cons { tail = Cons { tail = Cons { tail = Nil {} } } }
//│ ║         	                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── record literal of type `{tail: ?a}` does not have field 'head'
//│ ║  l.149: 	l1 = Cons { tail = Cons { tail = Cons { tail = Nil {} } } }
//│ ╙──       	                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.149: 	l1 = Cons { tail = Cons { tail = Cons { tail = Nil {} } } }
//│ ║         	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── record literal of type `{tail: ?a}` does not have field 'head'
//│ ║  l.149: 	l1 = Cons { tail = Cons { tail = Cons { tail = Nil {} } } }
//│ ╙──       	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ l1: Cons[nothing] & {tail: Cons[nothing] & {tail: Cons[nothing] & {tail: Nil[?]} | error} | error} | error


