
class Nil: {}
class Cons[A]: { head: A; tail: List[A] }
type List[A] = Nil | Cons[A]
//│ Defined class Nil
//│ Defined class Cons[+A]
//│ Defined type alias List[+A]

def originalCons = Cons  // Note: type still seems over-complicated because we push 'b inside the union, killing a hash-consing opportunity at the outer level...
//│ originalCons: {head: 'head & 'A, tail: List['A] & 'tail} -> (Cons['A] & {head: 'head, tail: 'tail})
//│             = [Function: originalCons]

def Nil = Nil {}
//│ Nil: Nil
//│    = Nil {}

def Cons head tail = Cons { head; tail }
//│ Cons: ('head & 'A) -> (List['A] & 'tail) -> (Cons['A] & {head: 'head, tail: 'tail})
//│     = [Function: Cons1]


Cons 2
//│ res: (List['A] & 'tail) -> (Cons[2 | 'A] & {head: 2, tail: 'tail})
//│    = [Function (anonymous)]

def c = Cons 2 Nil
//│ c: Cons[2] & {tail: Nil}
//│  = Cons { head: 2, tail: Nil {} }

def d = Cons 1 c
//│ d: Cons[1 | 2] & {head: 1, tail: Cons[2] & {tail: Nil}}
//│  = Cons { head: 1, tail: Cons { head: 2, tail: Nil {} } }

d.head
//│ res: 1
//│    = 1

res: 1
//│ res: 1
//│    = 1

d.tail
//│ res: Cons[2] & {tail: Nil}
//│    = Cons { head: 2, tail: Nil {} }

Cons 1 res
//│ res: Cons[1 | 2] & {head: 1, tail: Cons[2] & {tail: Nil}}
//│    = Cons { head: 1, tail: Cons { head: 2, tail: Nil {} } }

res.tail
//│ res: Cons[2] & {tail: Nil}
//│    = Cons { head: 2, tail: Nil {} }

Cons 1 (Cons 2 Nil)
//│ res: Cons[1 | 2] & {head: 1, tail: Cons[2] & {tail: Nil}}
//│    = Cons { head: 1, tail: Cons { head: 2, tail: Nil {} } }

res.tail
//│ res: Cons[2] & {tail: Nil}
//│    = Cons { head: 2, tail: Nil {} }

// We can now access the tail's tail, thanks to the refined type
res.tail
//│ res: Nil
//│    = Nil {}

:e
res.tail.head
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.68: 	res.tail.head
//│ ║        	^^^^^^^^
//│ ╟── application of type `Nil` does not have field 'tail'
//│ ║  l.13: 	def Nil = Nil {}
//│ ║        	          ^^^^^^
//│ ╟── but it flows into reference with expected type `{tail: ?tail}`
//│ ║  l.68: 	res.tail.head
//│ ║        	^^^
//│ ╟── Note: class Nil is defined at:
//│ ║  l.2: 	class Nil: {}
//│ ╙──     	      ^^^
//│ res: error
//│ Runtime error:
//│   TypeError: Cannot read properties of undefined (reading 'head')



def Cons head tail = originalCons { head; tail }
//│ Cons: ('head & 'A) -> (List['A] & 'tail) -> (Cons['A] & {head: 'head, tail: 'tail})
//│     = [Function: Cons2]


Cons 2
//│ res: (List['A] & 'tail) -> (Cons[2 | 'A] & {head: 2, tail: 'tail})
//│    = [Function (anonymous)]

Cons 2 Nil
//│ res: Cons[2] & {tail: Nil}
//│    = Cons { head: 2, tail: Nil {} }

res.head
//│ res: 2
//│    = 2

:e
Cons 1 res
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.105: 	Cons 1 res
//│ ║         	^^^^^^^^^^
//│ ╟── integer literal of type `2` does not match type `Cons[?A] | Nil`
//│ ║  l.96: 	Cons 2 Nil
//│ ║        	     ^
//│ ╟── but it flows into reference with expected type `Cons[?A0] | Nil`
//│ ║  l.105: 	Cons 1 res
//│ ║         	       ^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.4: 	type List[A] = Nil | Cons[A]
//│ ║       	               ^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.87: 	def Cons head tail = originalCons { head; tail }
//│ ╙──      	                                          ^^^^
//│ res: Cons[1] & {tail: 2} | error
//│    = Cons { head: 1, tail: 2 }

// Here there used to be a loss of precision in the older with-field approach.
//    The problem occured when constraining `α8 w/ {head: α5, tail: [α6]}  <!  nil | {head: α2}`
//    as we can't decide whether to constrain `α8 <! nil` or `α5 <! α2`...
// I seemingly solved it by just pushing `with` extensions applied on variables to the right
//    just long enough to push it back on the left after travsering type variable bounds...
//    This is okay because `with` types otherwise never occur in negative position... Note we could
//    have used a different "delayed with" type to be cleaner, though it's just not necessary.
// But then I reverted to the use of simple field-hiding types, as they are simpler!
// 
Cons 1 (Cons 2 Nil)
//│ res: Cons[1 | 2] & {head: 1, tail: Cons[2] & {tail: Nil}}
//│    = Cons { head: 1, tail: Cons { head: 2, tail: Nil {} } }

{ a = res.head; b = res.tail.head; c = res.tail.tail }
//│ res: {{a, b, c}} & {a: 1, b: 2, c: Nil}
//│    = { a: 1, b: 2, c: Nil {} }

Cons 2 Nil
//│ res: Cons[2] & {tail: Nil}
//│    = Cons { head: 2, tail: Nil {} }

Cons 1 (id res)
//│ res: Cons[1 | 2] & {head: 1, tail: Cons[2] & {tail: Nil}}
//│    = Cons { head: 1, tail: Cons { head: 2, tail: Nil {} } }

{ a = res.head; b = res.tail.head; c = res.tail.tail }
//│ res: {{a, b, c}} & {a: 1, b: 2, c: Nil}
//│    = { a: 1, b: 2, c: Nil {} }


def Cons head = originalCons { head=0; tail=Nil }
//│ Cons: anything -> (Cons[0] & {tail: Nil})
//│     = [Function: Cons3]

Cons 1
//│ res: Cons[0] & {tail: Nil}
//│    = Cons { head: 0, tail: Nil {} }

res.head
//│ res: 0
//│    = 0

def c = Cons 1
//│ c: Cons[0] & {tail: Nil}
//│  = Cons { head: 0, tail: Nil {} }

c.head
//│ res: 0
//│    = 0

def c: 'a -> List['b] -> List['a | 'b]
c 1 (c 2 Nil)
//│ c: 'a -> List['a] -> List['a]
//│  = <missing implementation>
//│ res: List[1 | 2]
//│    = <no result>
//│      c is not implemented

def c: 'a -> ('l & List['b]) -> (Cons[anything] & { head: 'a; tail: 'l })
c 1 (c 2 Nil)
//│ c: 'a -> (List[?] & 'l) -> (Cons[?] & {head: 'a, tail: 'l})
//│  = <missing implementation>
//│ res: Cons[?] & {head: 1, tail: Cons[?] & {head: 2, tail: Nil}}
//│    = <no result>
//│      c is not implemented
