
t = (1, 2, 3)
//│ t: (1, 2, 3,)
//│  = [ 1, 2, 3 ]

trait Hey: { x: int }
//│ Defined trait Hey

:e
Hey t
//│ ╔══[ERROR] Instantiation of an abstract type is forbidden
//│ ║  l.10: 	Hey t
//│ ║        	^^^
//│ ╟── Note that traits are always considered abstract
//│ ║  l.6: 	trait Hey: { x: int }
//│ ╙──     	      ^^^^^^^^^^^^^^^
//│ res: error
//│    = [ 1, 2, 3 ]

f ((a, b, c)) = { a; b; c }
//│ f: ('a, 'b, 'c,) -> {a: 'a, b: 'b, c: 'c}
//│  = [Function: f]

f t
//│ res: {a: 1, b: 2, c: 3}
//│    = { a: 1, b: 2, c: 3 }

f ((a, b)) = add a b
//│ f: (int, int,) -> int
//│  = [Function: f1]

:e
f t
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.33: 	f t
//│ ║        	^^^
//│ ╟── tuple literal of type `(1, 2, 3,)` does not match type `(?a, ?b,)`
//│ ║  l.2: 	t = (1, 2, 3)
//│ ║       	    ^^^^^^^^^
//│ ╟── but it flows into reference with expected type `(?c, ?d,)`
//│ ║  l.33: 	f t
//│ ║        	  ^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.28: 	f ((a, b)) = add a b
//│ ╙──      	   ^^^^^^
//│ res: error | int
//│    = 3


g arg = case arg of { Hey -> arg.x | _ -> () }
//│ g: ({x: 'x} & hey | ~hey) -> (() | 'x)
//│  = [Function: g]

g arg = case arg of { Hey -> arg.x | _ -> arg.y }
//│ g: ({x: 'x} & hey | {y: 'x} & ~hey) -> 'x
//│  = [Function: g1]

if true then (1,) else (2,)
//│ res: (1 | 2,)
//│    = [ 1 ]

if true then (1,) else (2, 3)
//│ res: Array[1 | 2 | 3] & {_1: 1 | 2}
//│    = [ 1 ]

if true then (1,) else fun x -> x
//│ res: (1,) | 'a -> 'a
//│    = [ 1 ]



t._1
t._2
//│ res: 1
//│    = undefined
//│ res: 2
//│    = undefined

:e
t.x
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.80: 	t.x
//│ ║        	^^^
//│ ╟── tuple literal of type `{_1: 1, _2: 2, _3: 3}` does not have field 'x'
//│ ║  l.2: 	t = (1, 2, 3)
//│ ║       	    ^^^^^^^^^
//│ ╟── but it flows into reference with expected type `{x: ?x}`
//│ ║  l.80: 	t.x
//│ ╙──      	^
//│ res: error
//│    = undefined

:e
(t: ("oops",int,int,))._1
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.94: 	(t: ("oops",int,int,))._1
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `1` does not match type `"oops"`
//│ ║  l.2: 	t = (1, 2, 3)
//│ ║       	     ^
//│ ╟── Note: constraint arises from literal type:
//│ ║  l.94: 	(t: ("oops",int,int,))._1
//│ ╙──      	     ^^^^^^
//│ res: "oops"
//│    = undefined


def f: (1, 2, 3) & (2, 2 | 3, 3 | 4)
//│ f: (nothing, 2, 3,)
//│  = <missing implementation>

def f: (1, 2, 3) & (2, 3)
//│ f: nothing
//│  = <missing implementation>

def f: (1, 2, 3) & Array[2 | 3 | 4]
//│ f: (nothing, 2, 3,)
//│  = <missing implementation>


