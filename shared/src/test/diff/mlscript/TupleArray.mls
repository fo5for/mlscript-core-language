
x = { a = 1 }
//│ x: {$fields: ~{a: nothing}, a: 1}
//│  = { a: 1 }

:e
(res: (int,int,int,))._1
//│ ╔══[ERROR] identifier not found: res
//│ ║  l.7: 	(res: (int,int,int,))._1
//│ ╙──     	 ^^^
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.7: 	(res: (int,int,int,))._1
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `(int, int, int,)` does not have field '_1'
//│ ║  l.7: 	(res: (int,int,int,))._1
//│ ║       	      ^^^^^^^^^^^^^^
//│ ╟── but it flows into receiver with expected type `{_1: ?a}`
//│ ║  l.7: 	(res: (int,int,int,))._1
//│ ╙──     	^^^^^^^^^^^^^^^^^^^^^
//│ res: error
//│    = undefined


def arr: Array[int]
def arr = (1,2)
//│ arr: Array[int]
//│    = <missing implementation>
//│ (1, 2,)
//│   <:  arr:
//│ Array[int]
//│    = [ 1, 2 ]

:e
arr._1
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.34: 	arr._1
//│ ║        	^^^^^^
//│ ╟── type `Array[int]` does not have field '_1'
//│ ║  l.24: 	def arr: Array[int]
//│ ║        	         ^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `{_1: ?a}`
//│ ║  l.34: 	arr._1
//│ ╙──      	^^^
//│ res: error
//│    = undefined



// :d
def test: {x: 1} & (1, 2, 3)
//│ test: (1, 2, 3,) & {x: 1}
//│     = <missing implementation>


// def f x = x[1]
// Array['a] -> 'a

// def f x = x.1
// {1: 'a} -> 'a

// f(... : Array[int])
// Array[int] <: {1: 'a}

// { 1 = 3456 }

:e
(arr[0])[1][2]
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.67: 	(arr[0])[1][2]
//│ ║        	^^^^^^^^^^^
//│ ╟── type `int` does not match type `Array[?a]`
//│ ║  l.24: 	def arr: Array[int]
//│ ║        	               ^^^
//│ ╟── but it flows into array access with expected type `Array[?b]`
//│ ║  l.67: 	(arr[0])[1][2]
//│ ╙──      	^^^^^^^^
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.67: 	(arr[0])[1][2]
//│ ║        	^^^^^^^^^^^^^^
//│ ╟── possibly-undefined array access of type `undefined` does not match type `Array[?a]`
//│ ║  l.67: 	(arr[0])[1][2]
//│ ╙──      	^^^^^^^^^^^
//│ res: error | undefined
//│ Runtime error:
//│   TypeError: Cannot read properties of undefined (reading '2')


class A: { x: int }
//│ Defined class A

def myval: A & { x: anything }
//│ myval: A
//│      = <missing implementation>

// def myval: a & { x: string }
// //│ myval: A with {x: string}


def tuuu: (1 | 2, true) & {_1: 2 | 3}
//│ tuuu: (2, true,)
//│     = <missing implementation>
// tuuu: ((1 | 2) & (2 | 3), true,)
// tuuu: (2, true,)

// (S, T, U)
// Array[S | T | U] & { _1: S; _2: T; _3: U }

def f(x: int, y: string) = x
//│ f: (int, string,) -> int
//│  = [Function: f]

// f(x = 1, y = "asf")

def f x = x
def f(x,) = x
//│ f: 'a -> 'a
//│  = [Function: f1]
//│ f: 'a -> 'a
//│  = [Function: f2]

// (1, 2)
// f((1, 2))

// [1, 2]
// f [1, 2]
// f ([1, 2], 2, 3)


f(1)
f 1
//│ res: 1
//│    = 1
//│ res: 1
//│    = 1

f((1,2))
//│ res: (1, 2,)
//│    = [ 1, 2 ]


trait T: { x: int }
//│ Defined trait T

def t: T
//│ t: T
//│  = <missing implementation>

t.x
//│ res: int
//│    = <no result>
//│      t is not implemented

rcd = { x = 1 }
//│ rcd: {$fields: ~{x: nothing}, x: 1}
//│    = { x: 1 }

:e
T rcd
//│ ╔══[ERROR] Instantiation of an abstract type is forbidden
//│ ║  l.158: 	T rcd
//│ ║         	^
//│ ╟── Note that traits are always considered abstract
//│ ║  l.141: 	trait T: { x: int }
//│ ╙──       	      ^^^^^^^^^^^^^
//│ res: error
//│    = { x: 1 }

res: { x: int }
//│ res: {x: int}
//│    = { x: 1 }


(1,2, (true, false, ("hello", "world", "bye")))
//│ res: (1, 2, (true, false, ("hello", "world", "bye",),),)
//│    = [ 1, 2, [ true, false, [ 'hello', 'world', 'bye' ] ] ]


ta1 = (5, 6, true, false, "hahaha")
//│ ta1: (5, 6, true, false, "hahaha",)
//│    = [ 5, 6, true, false, 'hahaha' ]

def rep5: 'a -> Array['a]
def rep5 x = (x,x,x,x,x)
//│ rep5: 'a -> Array['a]
//│     = <missing implementation>
//│ 'a -> ('a, 'a, 'a, 'a, 'a,)
//│   <:  rep5:
//│ 'a -> Array['a]
//│     = [Function: rep5]

def hg1 ((t1, t2, t3)) = (t1, t2)
hg1 ((5,5,5))
//│ hg1: ('a, 'b, anything,) -> ('a, 'b,)
//│    = [Function: hg1]
//│ res: (5, 5,)
//│    = [ 5, 5 ]

def ta1: Array[int] | (int, bool)
def test: (string, 1) & { _1: "hello" }
def test2: (string, 1) & { _1: "hello"; _3: int }
//│ ta1: Array[bool | int]
//│    = <missing implementation>
//│ test: ("hello", 1,)
//│     = <missing implementation>
//│ test2: ("hello", 1,) & {_3: int}
//│      = <missing implementation>

test: { _1: 'a }
//│ res: {_1: "hello"}
//│    = <no result>
//│      test is not implemented

// One could expect ("hello", 1,) here,
//    but we currently don't recover the intersected positional field from the record
//    when constraining refined tuples.
test: ('a, 1)
//│ res: (string, 1,)
//│    = <no result>
//│      test is not implemented

// In principe, we could narrow the refinement to ` & { _1: 1 }` here...
def test3: Array[1] & { _1: int }
//│ test3: Array[1] & {_1: int}
//│      = <missing implementation>

def fta1: Array[int | bool] -> int
def tb1: (int, true)
fta1 tb1
r1 = if true then (1,2,3) else (1, 2)
fta1 r1
//│ fta1: Array[bool | int] -> int
//│     = <missing implementation>
//│ tb1: (int, true,)
//│    = <missing implementation>
//│ res: int
//│    = <no result>
//│      fta1 is not implemented
//│ r1: Array[1 | 2 | 3]
//│   = [ 1, 2, 3 ]
//│ res: int
//│    = <no result>
//│      fta1 is not implemented

:NoJS
def p1: T | Array[bool] | (int, string) | (true, 3)
def p2: T | (string, bool) | Array[int] | (2, 4)
def pf t = (t[1], t._1)
//│ p1: Array[bool | int | string] | T
//│ p2: Array[bool | int | string] | T
//│ pf: (Array['a & ~undefined] & {_1: 'b}) -> (undefined | 'a, 'b,)

:e
pf((1,2,3))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.253: 	pf((1,2,3))
//│ ║         	^^^^^^^^^^^
//│ ╟── tuple literal of type `(1, 2, 3,)` does not have field '_1'
//│ ║  l.253: 	pf((1,2,3))
//│ ║         	   ^^^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.247: 	def pf t = (t[1], t._1)
//│ ║         	                  ^^^^
//│ ╟── from reference:
//│ ║  l.247: 	def pf t = (t[1], t._1)
//│ ╙──       	                  ^
//│ res: error | (1 | 2 | 3 | undefined, nothing,)
