
trait T1
trait T2
class C_1: T1
class C_2: T2
//│ Defined trait T1
//│ Defined trait T2
//│ Defined class C_1
//│ Defined class C_2

r = if true then C_1 1 else C_2 2
//│ r: C_1 | C_2
//│  = C_1 {}

case r of { T1 -> r | _ -> 0 }
//│ res: 0 | #T1 & (C_1 | C_2)
//│    = C_1 {}

case r of { T1 -> r | T2 -> r }
//│ res: 'a | ~#T2 & (C_1 | C_2) | #T1 & (C_1 | C_2) | ~#T1 & (C_1 | C_2) | ~'a & (C_1 | C_2)
//│    = C_1 {}

r = if true then C_1 ((1,2,3)) else C_2 ((3,4,5,4))
//│ r: C_1 | C_2
//│  = C_1 {}

case r of { T1 -> r | _ -> 0 }
//│ res: 0 | #T1 & (C_1 | C_2)
//│    = C_1 {}

case r of { T1 -> r | T2 -> r }
//│ res: 'a | ~'a & (C_1 | C_2) | ~#T2 & (C_1 | C_2) | #T1 & (C_1 | C_2) | ~#T1 & (C_1 | C_2)
//│    = C_1 {}


x = 1
//│ x: 1
//│  = 1

:e
t2 = T2 x
//│ ╔══[ERROR] Instantiation of an abstract type is forbidden
//│ ║  l.41: 	t2 = T2 x
//│ ║        	     ^^
//│ ╟── Note that traits are always considered abstract
//│ ║  l.3: 	trait T2
//│ ╙──     	      ^^
//│ t2: error
//│   = [Number: 1]

t2 = C_2 x
//│ t2: C_2
//│   = C_2 {}

t1 = C_1 t2
//│ t1: C_1
//│   = C_1 {}

t1: T1
//│ res: T1
//│    = C_1 {}

:e
t1: T2
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.64: 	t1: T2
//│ ║        	^^
//│ ╟── application of type `C_1` is not an instance of type `T2`
//│ ║  l.55: 	t1 = C_1 t2
//│ ║        	     ^^^^^^
//│ ╟── but it flows into reference with expected type `#T2`
//│ ║  l.64: 	t1: T2
//│ ║        	^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.64: 	t1: T2
//│ ║        	    ^^
//│ ╟── Note: class C_1 is defined at:
//│ ║  l.4: 	class C_1: T1
//│ ╙──     	      ^^^
//│ res: T2
//│    = C_1 {}


class C1[A]: { a: A }
class C2[A]: { a: A }
//│ Defined class C1[+A]
//│ Defined class C2[+A]

r = if true then C1 {a=x} else C2 {a=(3,4,5,4)}
//│ r: C1[1] | C2[(3, 4, 5, 4,)]
//│  = C1 { a: 1 }

case r of { C1 -> r.a | _ -> 0 }
//│ res: 0 | 1
//│    = 1

def x1: (int, bool)
def x2: (string, unit)
//│ x1: (int, bool,)
//│   = <missing implementation>
//│ x2: (string, unit,)
//│   = <missing implementation>


if true then x1 else x2
//│ res: (int | string, bool | unit,)
//│    = <no result>
//│      x1 is not implemented



def f: ((1,2) | (3,4)) -> anything
//│ f: (1 | 3, 2 | 4,) -> anything
//│  = <missing implementation>

fun (x, y) -> f ((x,y))
//│ res: (1 | 3, 2 | 4,) -> anything
//│    = <no result>
//│      f is not implemented

def f: ((1,2)&t1 | (3,4)&t2) -> anything
//│ f: ((1, 2,) & #T1 | (3, 4,) & #T2) -> anything
//│  = <missing implementation>

:e
f ((true,false))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.126: 	f ((true,false))
//│ ║         	^^^^^^^^^^^^^^^^
//│ ╟── reference of type `true` does not match type `1 | 3`
//│ ║  l.126: 	f ((true,false))
//│ ╙──       	    ^^^^
//│ res: error
//│    = <no result>
//│      f is not implemented

:e
fun (x, y) -> f ((x,y))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.138: 	fun (x, y) -> f ((x,y))
//│ ║         	              ^^^^^^^^^
//│ ╟── tuple literal of type `(?a, ?b,)` does not match type `(1, 2,) & #T1 | (3, 4,) & #T2`
//│ ║  l.138: 	fun (x, y) -> f ((x,y))
//│ ║         	                 ^^^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.121: 	def f: ((1,2)&t1 | (3,4)&t2) -> anything
//│ ╙──       	       ^^^^^^^^^^^^^^^^^^^^^
//│ res: (nothing, nothing,) -> anything
//│    = <no result>
//│      f is not implemented

:e
fun (x, y) -> f (T1 ((x,y)))
//│ ╔══[ERROR] Instantiation of an abstract type is forbidden
//│ ║  l.153: 	fun (x, y) -> f (T1 ((x,y)))
//│ ║         	                 ^^
//│ ╟── Note that traits are always considered abstract
//│ ║  l.2: 	trait T1
//│ ╙──     	      ^^
//│ res: (anything, anything,) -> anything
//│    = <no result>
//│      f is not implemented

:e
fun (x, y) -> f (T2 ((x,y)))
//│ ╔══[ERROR] Instantiation of an abstract type is forbidden
//│ ║  l.165: 	fun (x, y) -> f (T2 ((x,y)))
//│ ║         	                 ^^
//│ ╟── Note that traits are always considered abstract
//│ ║  l.3: 	trait T2
//│ ╙──     	      ^^
//│ res: (anything, anything,) -> anything
//│    = <no result>
//│      f is not implemented

:ns
res = if true then (1,2, "hello") else (true, 3)
//│ res: 'a
//│   where
//│     'a :> (1, 2, "hello",) | (true, 3,)
//│    = [ 1, 2, 'hello' ]

res = if true then (1, 2, 3, 'hello') else (true, 4, false)
hhh = if false then (45,345, 'bye', true) else (false, 3)
t = if false then res else hhh
g = if true then (6,6,6) else res
//│ res: Array["hello" | 1 | 2 | 3 | 4 | false | true] & {_1: 1 | true, _2: 2 | 4, _3: 3 | false}
//│    = [ 1, 2, 3, 'hello' ]
//│ hhh: Array["bye" | 345 | 3 | 45 | false | true] & {_1: 45 | false, _2: 345 | 3}
//│    = [ false, 3 ]
//│ t: Array["bye" | "hello" | 1 | 2 | 345 | 3 | 45 | 4 | false | true] & {_1: 1 | 45 | false | true, _2: 2 | 345 | 3 | 4}
//│  = [ false, 3 ]
//│ g: Array["hello" | 1 | 2 | 3 | 4 | 6 | false | true] & {_1: 1 | 6 | true, _2: 2 | 4 | 6, _3: 3 | 6 | false}
//│  = [ 6, 6, 6 ]

def f: (int, bool) -> int
def g: (bool, string, int) -> int
// def h x = (f(x), g(x))
//│ f: (int, bool,) -> int
//│  = <missing implementation>
//│ g: (bool, string, int,) -> int
//│  = <missing implementation>

p1 = if true then (1, 2, 2) else (true, false)
//│ p1: Array[1 | 2 | false | true] & {_1: 1 | true, _2: 2 | false}
//│   = [ 1, 2, 2 ]

def q: Array[int]
q = if true then (1,1) else (1,1,1)
//│ q: Array[int]
//│  = <missing implementation>
//│ Array[1] & {_1: 1, _2: 1}
//│   <:  q:
//│ Array[int]
//│  = [ 1, 1 ]

// Note: function with non-tuple domain
def h f = (f (1,2,false), f (1,true))
//│ h: ((Array[1 | 2 | false | true] & {_1: 1, _2: 2 | true}) -> 'a) -> ('a, 'a,)
//│  = [Function: h]

:e
h (fun x -> x[0])
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.223: 	h (fun x -> x[0])
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╟── tuple literal of type `(1, true,)` does not match type `(?a,)`
//│ ║  l.218: 	def h f = (f (1,2,false), f (1,true))
//│ ╙──       	                            ^^^^^^^^
//│ res: error | (undefined, undefined,)
//│    = [ undefined, undefined ]

:e
h (fun (x, y) -> x)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.234: 	h (fun (x, y) -> x)
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ╟── tuple literal of type `(1, 2, false,)` does not match type `(?a, ?b,)`
//│ ║  l.218: 	def h f = (f (1,2,false), f (1,true))
//│ ║         	             ^^^^^^^^^^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.234: 	h (fun (x, y) -> x)
//│ ╙──       	       ^^^^^^
//│ res: error | (1, 1,)
//│    = [ 1, 1 ]

def h f = (f ((1,2,false)), f ((1,true)))
//│ h: ((Array[1 | 2 | false | true] & {_1: 1, _2: 2 | true}) -> 'a) -> ('a, 'a,)
//│  = [Function: h1]

h (fun x -> x[0])
h (fun x -> x._1)
//│ res: (1 | 2 | false | true | undefined, 1 | 2 | false | true | undefined,)
//│    = [ 1, 1 ]
//│ res: (1, 1,)
//│    = [ undefined, undefined ]


q1 = (1,1,1,1)
q2 = (1,1)
fx ((a,b,c)) = a + b + c
//│ q1: (1, 1, 1, 1,)
//│   = [ 1, 1, 1, 1 ]
//│ q2: (1, 1,)
//│   = [ 1, 1 ]
//│ fx: (int, int, int,) -> int
//│   = [Function: fx]

:e
fx q1
fx q2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.270: 	fx q1
//│ ║         	^^^^^
//│ ╟── tuple literal of type `(1, 1, 1, 1,)` does not match type `(?a, ?b, ?c,)`
//│ ║  l.259: 	q1 = (1,1,1,1)
//│ ║         	     ^^^^^^^^^
//│ ╟── but it flows into reference with expected type `(?d, ?e, ?f,)`
//│ ║  l.270: 	fx q1
//│ ║         	   ^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.261: 	fx ((a,b,c)) = a + b + c
//│ ╙──       	    ^^^^^^^
//│ res: error | int
//│    = 3
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.271: 	fx q2
//│ ║         	^^^^^
//│ ╟── tuple literal of type `(1, 1,)` does not match type `(?a, ?b, ?c,)`
//│ ║  l.260: 	q2 = (1,1)
//│ ║         	     ^^^^^
//│ ╟── but it flows into reference with expected type `(?d, ?e, ?f,)`
//│ ║  l.271: 	fx q2
//│ ║         	   ^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.261: 	fx ((a,b,c)) = a + b + c
//│ ╙──       	    ^^^^^^^
//│ res: error | int
//│    = NaN


// :d
q = (1,1)
//│ (1, 1,)
//│   <:  q:
//│ Array[int]
//│  = [ 1, 1 ]

def sum: Array[int] -> int
t1 = (1,2,3,4,5,6)
sum t1
//│ sum: Array[int] -> int
//│    = <missing implementation>
//│ t1: (1, 2, 3, 4, 5, 6,)
//│   = [ 1, 2, 3, 4, 5, 6 ]
//│ res: int
//│    = <no result>
//│      sum is not implemented

:e
t2 = (1,1,2,true)
sum t2
//│ t2: (1, 1, 2, true,)
//│   = [ 1, 1, 2, true ]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.322: 	sum t2
//│ ║         	^^^^^^
//│ ╟── reference of type `true` is not an instance of type `int`
//│ ║  l.321: 	t2 = (1,1,2,true)
//│ ║         	            ^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.309: 	def sum: Array[int] -> int
//│ ╙──       	               ^^^
//│ res: error | int
//│    = <no result>
//│      sum is not implemented

t2: (1, 1, 2, bool)
t2: Array[int | bool]
//│ res: (1, 1, 2, bool,)
//│    = [ 1, 1, 2, true ]
//│ res: Array[bool | int]
//│    = [ 1, 1, 2, true ]

class Wrapped[A]: {len: int; inner: Array[A]}
//│ Defined class Wrapped[+A]

def tk: Array['a] -> Wrapped['a]
tk ((1,2,3,true,false))
//│ tk: Array['a] -> Wrapped['a]
//│   = <missing implementation>
//│ res: Wrapped[1 | 2 | 3 | false | true]
//│    = <no result>
//│      tk is not implemented

class Two[A, B]: {fst: Array[A]; snd: Array[B]}
two = Two {fst=(1,2,3); snd=(true,false)}
two.fst
tk (two.snd)
//│ Defined class Two[+A, +B]
//│ two: Two[1 | 2 | 3, bool] & {fst: (1, 2, 3,), snd: (true, false,)}
//│    = Two { fst: [ 1, 2, 3 ], snd: [ true, false ] }
//│ res: (1, 2, 3,)
//│    = [ 1, 2, 3 ]
//│ res: Wrapped[bool]
//│    = <no result>
//│      tk is not implemented

:e
def a1: Array[int]
a1 = (1,2,true,'hello')
a1._2
//│ a1: Array[int]
//│   = <missing implementation>
//│ (1, 2, true, "hello",)
//│   <:  a1:
//│ Array[int]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.371: 	a1 = (1,2,true,'hello')
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── reference of type `true` is not an instance of type `int`
//│ ║  l.371: 	a1 = (1,2,true,'hello')
//│ ║         	          ^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.370: 	def a1: Array[int]
//│ ╙──       	              ^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.371: 	a1 = (1,2,true,'hello')
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── string literal of type `"hello"` is not an instance of type `int`
//│ ║  l.371: 	a1 = (1,2,true,'hello')
//│ ║         	               ^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.370: 	def a1: Array[int]
//│ ╙──       	              ^^^
//│   = [ 1, 2, true, 'hello' ]
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.372: 	a1._2
//│ ║         	^^^^^
//│ ╟── type `Array[int]` does not have field '_2'
//│ ║  l.370: 	def a1: Array[int]
//│ ║         	        ^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `{_2: ?a}`
//│ ║  l.372: 	a1._2
//│ ╙──       	^^
//│ res: error
//│    = undefined

def getx p = p.x
def a123: Array[int]
a123 = (1,2,3)
//│ getx: {x: 'x} -> 'x
//│     = [Function: getx]
//│ a123: Array[int]
//│     = <missing implementation>
//│ (1, 2, 3,)
//│   <:  a123:
//│ Array[int]
//│     = [ 1, 2, 3 ]

:e
getx (a123)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.422: 	getx (a123)
//│ ║         	^^^^^^^^^^^
//│ ╟── type `Array[int]` does not have field 'x'
//│ ║  l.410: 	def a123: Array[int]
//│ ║         	          ^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `{x: ?x}`
//│ ║  l.422: 	getx (a123)
//│ ║         	      ^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.409: 	def getx p = p.x
//│ ║         	             ^^^
//│ ╟── from reference:
//│ ║  l.409: 	def getx p = p.x
//│ ╙──       	             ^
//│ res: error
//│    = undefined

def append: Array['a] -> Array['b] -> Array['a | 'b]
append ((1,2,false)) (((), 'hi'))
//│ append: Array['a] -> Array['a] -> Array['a]
//│       = <missing implementation>
//│ res: Array["hi" | 1 | 2 | false | ()]
//│    = <no result>
//│      append is not implemented

def ta: T1 & Array[int]
//│ ta: T1 & Array[int]
//│   = <missing implementation>

def tb: T2 & Array[int]
def tba: (T2 & Array[int | bool]) -> (T2 & int)
//│ tb: T2 & Array[int]
//│   = <missing implementation>
//│ tba: (T2 & Array[bool | int]) -> (T2 & int)
//│    = <missing implementation>

:e
tb = T2 ((1,2,3))
tba tb
//│ ╔══[ERROR] Instantiation of an abstract type is forbidden
//│ ║  l.461: 	tb = T2 ((1,2,3))
//│ ║         	     ^^
//│ ╟── Note that traits are always considered abstract
//│ ║  l.3: 	trait T2
//│ ╙──     	      ^^
//│ error
//│   <:  tb:
//│ T2 & Array[int]
//│   = [ 1, 2, 3 ]
//│ res: T2 & int
//│    = <no result>
//│      tba is not implemented

def k: (true, false, 3) & Array[int | true]
def k2: Array[1 | 2 | 3] & (true, 'hi', 2, 3)
//│ k: (true, nothing, 3,)
//│  = <missing implementation>
//│ k2: (nothing, nothing, 2, 3,)
//│   = <missing implementation>

def gett1 p q = case p of {T1 -> p | _ -> q}
def gt: (T1 & Array[int | bool]) -> Array[int]
gt ta
def tg: ((T1 & Array[int]) | (T2 & Array[bool])) -> (T1 | T2)
//│ gett1: (#T1 & 'a | ~#T1) -> 'a -> 'a
//│      = [Function: gett1]
//│ gt: (T1 & Array[bool | int]) -> Array[int]
//│   = <missing implementation>
//│ res: Array[int]
//│    = <no result>
//│      gt is not implemented
//│ tg: (T2 & Array[bool] | T1 & Array[int]) -> (T1 | T2)
//│   = <missing implementation>

:e
gett1 ta (T1 123)
tg (T1 ((1,2,3,4)))
tg (T2 ((true,false,false)))
//│ ╔══[ERROR] Instantiation of an abstract type is forbidden
//│ ║  l.499: 	gett1 ta (T1 123)
//│ ║         	          ^^
//│ ╟── Note that traits are always considered abstract
//│ ║  l.2: 	trait T1
//│ ╙──     	      ^^
//│ res: error | Array[int] & #T1
//│    = <no result>
//│      ta is not implemented
//│ ╔══[ERROR] Instantiation of an abstract type is forbidden
//│ ║  l.500: 	tg (T1 ((1,2,3,4)))
//│ ║         	    ^^
//│ ╟── Note that traits are always considered abstract
//│ ║  l.2: 	trait T1
//│ ╙──     	      ^^
//│ res: T1 | T2
//│    = <no result>
//│      tg is not implemented
//│ ╔══[ERROR] Instantiation of an abstract type is forbidden
//│ ║  l.501: 	tg (T2 ((true,false,false)))
//│ ║         	    ^^
//│ ╟── Note that traits are always considered abstract
//│ ║  l.3: 	trait T2
//│ ╙──     	      ^^
//│ res: T1 | T2
//│    = <no result>
//│      tg is not implemented

def fst ((a, b)) = a
def snd ((a, b)) = b
def get: Array['a] -> int -> 'a
//│ fst: ('a, anything,) -> 'a
//│    = [Function: fst]
//│ snd: (anything, 'a,) -> 'a
//│    = [Function: snd]
//│ get: Array['a] -> int -> 'a
//│    = <missing implementation>

fst ((1,2))
snd ((1,2))
get ((1,2,3)) 1
//│ res: 1
//│    = 1
//│ res: 2
//│    = 2
//│ res: 1 | 2 | 3
//│    = <no result>
//│      get is not implemented

def intersect: Array['a] -> Array['b] -> Array['a & 'b]
iarr = intersect ((1,2,3,false)) ((1,5,true,'hi',false))
//│ intersect: Array['a] -> Array['b] -> Array['a & 'b]
//│          = <missing implementation>
//│ iarr: Array[1 | false]
//│     = <no result>
//│       intersect is not implemented

:e
fst iarr
snd (T1 ((1,2,3)))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.560: 	fst iarr
//│ ║         	^^^^^^^^
//│ ╟── type `Array[?a & ?b]` is not a 2-element tuple
//│ ║  l.551: 	def intersect: Array['a] -> Array['b] -> Array['a & 'b]
//│ ║         	                                         ^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `(?c, ?d,)`
//│ ║  l.560: 	fst iarr
//│ ║         	    ^^^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.530: 	def fst ((a, b)) = a
//│ ╙──       	         ^^^^^^
//│ res: error
//│    = <no result>
//│      iarr and intersect are not implemented
//│ ╔══[ERROR] Instantiation of an abstract type is forbidden
//│ ║  l.561: 	snd (T1 ((1,2,3)))
//│ ║         	     ^^
//│ ╟── Note that traits are always considered abstract
//│ ║  l.2: 	trait T1
//│ ╙──     	      ^^
//│ res: nothing
//│    = 2

def inn: (T1 & T2 & Array['a]) -> 'a
def inn2: (T2 & Array[Array['a]]) -> Array[T1 & 'a]
//│ inn: (T1 & T2 & Array['a]) -> 'a
//│    = <missing implementation>
//│ inn2: (T2 & Array[Array['a]]) -> Array[T1 & 'a]
//│     = <missing implementation>

:e
v1 = T1 (T2 ((1,2,true)))
inn v1
//│ ╔══[ERROR] Instantiation of an abstract type is forbidden
//│ ║  l.594: 	v1 = T1 (T2 ((1,2,true)))
//│ ║         	     ^^
//│ ╟── Note that traits are always considered abstract
//│ ║  l.2: 	trait T1
//│ ╙──     	      ^^
//│ ╔══[ERROR] Instantiation of an abstract type is forbidden
//│ ║  l.594: 	v1 = T1 (T2 ((1,2,true)))
//│ ║         	         ^^
//│ ╟── Note that traits are always considered abstract
//│ ║  l.3: 	trait T2
//│ ╙──     	      ^^
//│ v1: error
//│   = [ 1, 2, true ]
//│ res: nothing
//│    = <no result>
//│      inn is not implemented

def v3: Array[Array[(int, true)]]
//│ v3: Array[Array[(int, true,)]]
//│   = <missing implementation>

:e
r1 = inn2 (T2 v3)
inn (T1 (T2 v3))
//│ ╔══[ERROR] Instantiation of an abstract type is forbidden
//│ ║  l.619: 	r1 = inn2 (T2 v3)
//│ ║         	           ^^
//│ ╟── Note that traits are always considered abstract
//│ ║  l.3: 	trait T2
//│ ╙──     	      ^^
//│ r1: Array[nothing]
//│   = <no result>
//│     inn2 is not implemented
//│ ╔══[ERROR] Instantiation of an abstract type is forbidden
//│ ║  l.620: 	inn (T1 (T2 v3))
//│ ║         	     ^^
//│ ╟── Note that traits are always considered abstract
//│ ║  l.2: 	trait T1
//│ ╙──     	      ^^
//│ ╔══[ERROR] Instantiation of an abstract type is forbidden
//│ ║  l.620: 	inn (T1 (T2 v3))
//│ ║         	         ^^
//│ ╟── Note that traits are always considered abstract
//│ ║  l.3: 	trait T2
//│ ╙──     	      ^^
//│ res: nothing
//│    = <no result>
//│      inn is not implemented

v3: Array[Array[Array[int | bool]]]
//│ res: Array[Array[Array[bool | int]]]
//│    = <no result>
//│      v3 is not implemented

:e
inn2 (T2 r1)
//│ ╔══[ERROR] Instantiation of an abstract type is forbidden
//│ ║  l.652: 	inn2 (T2 r1)
//│ ║         	      ^^
//│ ╟── Note that traits are always considered abstract
//│ ║  l.3: 	trait T2
//│ ╙──     	      ^^
//│ res: Array[nothing]
//│    = <no result>
//│      inn2 is not implemented

:e
inn (T1 v3)
inn2 v1
//│ ╔══[ERROR] Instantiation of an abstract type is forbidden
//│ ║  l.664: 	inn (T1 v3)
//│ ║         	     ^^
//│ ╟── Note that traits are always considered abstract
//│ ║  l.2: 	trait T1
//│ ╙──     	      ^^
//│ res: nothing
//│    = <no result>
//│      inn is not implemented
//│ res: Array[nothing]
//│    = <no result>
//│      inn2 is not implemented

def ra: ('a, 'a) as 'a
ra: Array[Array['a]] as 'a
ra: Array[('a, 'a)] as 'a
ra: (Array['a], Array['a]) as 'a
//│ ra: 'a
//│   where
//│     'a :> ('a, 'a,)
//│   = <missing implementation>
//│ res: 'a
//│   where
//│     'a :> 'a0 | Array[Array['a]]
//│     'a0 :> ('a0, 'a0,)
//│    = <no result>
//│      ra is not implemented
//│ res: 'a
//│   where
//│     'a :> 'a0 | Array[('a, 'a,)]
//│     'a0 :> ('a0, 'a0,)
//│    = <no result>
//│      ra is not implemented
//│ res: 'a
//│   where
//│     'a :> ('a0 | Array['a], 'a0 | Array['a],)
//│     'a0 :> ('a0, 'a0,)
//│    = <no result>
//│      ra is not implemented

:e
ra: ('a, 'a, 'a) as 'a
ra: (Array['a], Array['a], Array['a]) as 'a
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.707: 	ra: ('a, 'a, 'a) as 'a
//│ ║         	^^
//│ ╟── type `(?a, ?a,)` does not match type `(?a0, ?a0, ?a0,)`
//│ ║  l.679: 	def ra: ('a, 'a) as 'a
//│ ║         	        ^^^^^^^^
//│ ╟── but it flows into reference with expected type `(?a1, ?a1, ?a1,)`
//│ ║  l.707: 	ra: ('a, 'a, 'a) as 'a
//│ ║         	^^
//│ ╟── Note: constraint arises from tuple type:
//│ ║  l.707: 	ra: ('a, 'a, 'a) as 'a
//│ ╙──       	    ^^^^^^^^^^^^
//│ res: 'a
//│   where
//│     'a :> error | 'a0 | ('a, 'a, 'a,)
//│     'a0 :> ('a0, 'a0,)
//│    = <no result>
//│      ra is not implemented
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.708: 	ra: (Array['a], Array['a], Array['a]) as 'a
//│ ║         	^^
//│ ╟── type `(?a, ?a,)` does not match type `(Array[?a0], Array[?a0], Array[?a0],)`
//│ ║  l.679: 	def ra: ('a, 'a) as 'a
//│ ║         	        ^^^^^^^^
//│ ╟── but it flows into reference with expected type `(Array[?a1], Array[?a1], Array[?a1],)`
//│ ║  l.708: 	ra: (Array['a], Array['a], Array['a]) as 'a
//│ ║         	^^
//│ ╟── Note: constraint arises from tuple type:
//│ ║  l.708: 	ra: (Array['a], Array['a], Array['a]) as 'a
//│ ╙──       	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: 'a
//│   where
//│     'a :> error | 'a0 | (Array['a], Array['a], Array['a],)
//│     'a0 :> ('a0, 'a0,)
//│    = <no result>
//│      ra is not implemented

def tktup t = (t._2, t._3)
tktup ((1,2,3,true))
//│ tktup: {_2: 'a, _3: 'b} -> ('a, 'b,)
//│      = [Function: tktup]
//│ res: (2, 3,)
//│    = [ undefined, undefined ]

:e
tktup a123
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.754: 	tktup a123
//│ ║         	^^^^^^^^^^
//│ ╟── type `Array[int]` does not have field '_3'
//│ ║  l.410: 	def a123: Array[int]
//│ ║         	          ^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `{_3: ?a}`
//│ ║  l.754: 	tktup a123
//│ ║         	      ^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.746: 	def tktup t = (t._2, t._3)
//│ ║         	                     ^^^^
//│ ╟── from reference:
//│ ║  l.746: 	def tktup t = (t._2, t._3)
//│ ╙──       	                     ^
//│ res: error | (nothing, nothing,)
//│    = [ undefined, undefined ]


def definedOr x els = case x of {
  | undefined -> els()
  | _ -> x
  }
def defined x = definedOr x (fun () -> error)
def ornull x = definedOr x (fun () -> null)
//│ definedOr: (undefined | 'a & ~undefined) -> (() -> 'a) -> 'a
//│          = [Function: definedOr]
//│ defined: (undefined | 'a & ~undefined) -> 'a
//│        = [Function: defined]
//│ ornull: (undefined | 'a & ~undefined) -> (null | 'a)
//│       = [Function: ornull]

()
//│ res: ()
//│    = []

()[0]
//│ res: undefined
//│    = undefined

:pe
defined ()[0]
//│ /!\ Parse error: Expected end-of-input:1:11, found "[0];" at l.796:11: defined ()[0]

:re
defined (()[0])
//│ res: nothing
//│ Runtime error:
//│   Error: unexpected runtime error


ta1 = defined((2,3,4,5))
ta1[1]
ta2 = (defined((1,2,4)), defined((true, false)))
(ornull ((defined ta2[0])[1+4]), defined ta[1])[0]
ta3 = (defined((1,2,3)), "hello", false)
ta3[1-2]
(1,2,3)[4]
//│ ta1: (2, 3, 4, 5,) & ~undefined
//│    = [ 2, 3, 4, 5 ]
//│ res: 2 | 3 | 4 | 5 | undefined
//│    = 3
//│ ta2: ((1, 2, 4,) & ~undefined, (true, false,) & ~undefined,)
//│    = [ [ 1, 2, 4 ], [ true, false ] ]
//│ res: false | int | null | true | undefined
//│    = <no result>
//│      ta is not implemented
//│ ta3: ((1, 2, 3,) & ~undefined, "hello", false,)
//│    = [ [ 1, 2, 3 ], 'hello', false ]
//│ res: "hello" | false | undefined | (1, 2, 3,) & ~undefined
//│    = undefined
//│ res: 1 | 2 | 3 | undefined
//│    = undefined

:e
((defined ta2[0])[1+4], ta[1])[0]
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.830: 	((defined ta2[0])[1+4], ta[1])[0]
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── possibly-undefined array access of type `undefined` does not match type `~undefined`
//│ ║  l.830: 	((defined ta2[0])[1+4], ta[1])[0]
//│ ╙──       	 ^^^^^^^^^^^^^^^^^^^^^
//│ res: error | false | int | true | undefined
//│    = <no result>
//│      ta is not implemented

:e
def ge x = x + 1
ta3[ge 3][ge (1+2)]
true[false]
4["hello"]
ge[2]
//│ ge: int -> int
//│   = [Function: ge]
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.843: 	ta3[ge 3][ge (1+2)]
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ╟── string literal of type `"hello"` does not match type `Array[?a]`
//│ ║  l.810: 	ta3 = (defined((1,2,3)), "hello", false)
//│ ║         	                         ^^^^^^^
//│ ╟── but it flows into array access with expected type `Array[?b]`
//│ ║  l.843: 	ta3[ge 3][ge (1+2)]
//│ ╙──       	^^^^^^^^^
//│ res: 1 | 2 | 3 | error | undefined
//│ Runtime error:
//│   TypeError: Cannot read properties of undefined (reading '4')
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.844: 	true[false]
//│ ║         	^^^^^^^^^^^
//│ ╟── reference of type `false` is not an instance of type `int`
//│ ║  l.844: 	true[false]
//│ ╙──       	     ^^^^^
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.844: 	true[false]
//│ ║         	^^^^^^^^^^^
//│ ╟── reference of type `true` does not match type `Array[?a]`
//│ ║  l.844: 	true[false]
//│ ╙──       	^^^^
//│ res: error | undefined
//│    = undefined
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.845: 	4["hello"]
//│ ║         	^^^^^^^^^^
//│ ╟── string literal of type `"hello"` is not an instance of type `int`
//│ ║  l.845: 	4["hello"]
//│ ╙──       	  ^^^^^^^
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.845: 	4["hello"]
//│ ║         	^^^^^^^^^^
//│ ╟── integer literal of type `4` does not match type `Array[?a]`
//│ ║  l.845: 	4["hello"]
//│ ╙──       	^
//│ res: error | undefined
//│    = undefined
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.846: 	ge[2]
//│ ║         	^^^^^
//│ ╟── function of type `?a -> ?b` does not match type `Array[?c]`
//│ ║  l.842: 	def ge x = x + 1
//│ ║         	       ^^^^^^^^^
//│ ╟── but it flows into reference with expected type `Array[?d]`
//│ ║  l.846: 	ge[2]
//│ ╙──       	^^
//│ res: error | undefined
//│    = undefined

def mkarr: 'a -> Array['a]
def mkarr x = (x,x,x,x,x)
mk1 = defined ((mkarr 6)[ 0])
(mkarr (mk1/3))[(3)]
mkarr ((1,true,"hi")[0])
//│ mkarr: 'a -> Array['a]
//│      = <missing implementation>
//│ 'a -> ('a, 'a, 'a, 'a, 'a,)
//│   <:  mkarr:
//│ 'a -> Array['a]
//│      = [Function: mkarr]
//│ mk1: 6
//│    = 6
//│ res: int | undefined
//│    = 2
//│ res: Array["hi" | 1 | true | undefined]
//│    = [ 1, 1, 1, 1, 1 ]

:e 
mkarr (3 [  1])
mk1[2  ]
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.920: 	mkarr (3 [  1])
//│ ║         	       ^^^^^^^
//│ ╟── integer literal of type `3` does not match type `Array[?a]`
//│ ║  l.920: 	mkarr (3 [  1])
//│ ╙──       	       ^
//│ res: Array[error | undefined]
//│    = [ undefined, undefined, undefined, undefined, undefined ]
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.921: 	mk1[2  ]
//│ ║         	^^^^^^^^
//│ ╟── integer literal of type `6` does not match type `Array[?a]`
//│ ║  l.903: 	mk1 = defined ((mkarr 6)[ 0])
//│ ║         	                      ^
//│ ╟── but it flows into reference with expected type `Array[?b]`
//│ ║  l.921: 	mk1[2  ]
//│ ╙──       	^^^
//│ res: error | undefined
//│    = undefined

def s1 a = (defined (a[1]) + defined (a[2]), a[(1,2)._2])
def s2 a = (defined ((defined a[1])[0]))._2 + (defined a[2])._1
def s3 a = defined (a._1.t[0]) + defined ((defined (a.x[1]))[2])
(defined ((defined((1, "hello")), defined((2, true, false)), defined((3,3,4)))[0]))._1
//│ s1: Array[int & 'a] -> (int, undefined | 'a,)
//│   = [Function: s1]
//│ s2: Array[Array[{_2: int} & ~undefined] & {_1: int} & ~undefined] -> int
//│   = [Function: s2]
//│ s3: {_1: {t: Array[int]}, x: Array[Array[int] & ~undefined]} -> int
//│   = [Function: s3]
//│ res: 1 | 2 | 3
//│    = undefined

def ara: Array[(int, bool) & ~undefined] & ~undefined
def arb: Array[Array[(int, int) & ~undefined] & ~undefined] & ~undefined
(defined (ara[1]))._1
(defined ((defined arb[0])[1]))._2
def s4 arr = (defined ((defined ((defined (arr.x[0]))._3[6]))[7]))._h.hello
//│ ara: Array[(int, bool,) & ~undefined] & ~undefined
//│    = <missing implementation>
//│ arb: Array[Array[(int, int,) & ~undefined] & ~undefined] & ~undefined
//│    = <missing implementation>
//│ res: int
//│    = <no result>
//│      ara is not implemented
//│ res: int
//│    = <no result>
//│      arb is not implemented
//│ s4: {x: Array[{_3: Array[Array[{_h: {hello: 'hello}} & ~undefined] & ~undefined]} & ~undefined]} -> 'hello
//│   = [Function: s4]

def at1 xs = (defined (xs[0]))._1
def dup a b = a * 2 + b
dup ((defined (ara[1]))._1) ((defined ((defined (arb[10]))[8]))._2) + 1
//│ at1: Array[{_1: 'a} & ~undefined] -> 'a
//│    = [Function: at1]
//│ dup: int -> int -> int
//│    = [Function: dup]
//│ res: int
//│    = <no result>
//│      ara is not implemented

:e
(1,2,3)._1[1]
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.985: 	(1,2,3)._1[1]
//│ ║         	^^^^^^^^^^^^^
//│ ╟── integer literal of type `1` does not match type `Array[?a]`
//│ ║  l.985: 	(1,2,3)._1[1]
//│ ║         	 ^
//│ ╟── but it flows into field selection with expected type `Array[?b]`
//│ ║  l.985: 	(1,2,3)._1[1]
//│ ╙──       	^^^^^^^^^^
//│ res: error | undefined
//│ Runtime error:
//│   TypeError: Cannot read properties of undefined (reading '1')

