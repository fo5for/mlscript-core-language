:NoJS

{ a = "hello"; b = "world" }
1 + 2 - 5
let t = { a = 5; b = "world"} in if t.a == 1 then 1 else (fun f -> f.b )
def x = 1
def y = 2
def z = x + y
(1, 3, { a = { b = { c = "d"}}}, "hello hello")
// common values
//│ res: {$fields: ~{a: nothing, b: nothing}, a: "hello", b: "world"}
//│ res: int
//│ res: 1 | {b: 'b} -> 'b
//│ x: 1
//│ y: 2
//│ z: int
//│ res: (1, 3, {$fields: ~{a: nothing}, a: {$fields: ~{b: nothing}, b: {$fields: ~{c: nothing}, c: "d"}}}, "hello hello",)

// :ts
def rcd = { x = 1 }
rcd.x
// records
//│ rcd: {$fields: ~{x: nothing}, x: 1}
//│ res: 1

// :ts
def f (a: int) (b: string) (c: bool) = if c then a else b
rec def fact x = if x == 1 then 1 else x * fact (x - 1)
def g x y = if x.b == 1 then x else x.a
// miscellaneous functions
//│ f: int -> string -> bool -> (int | string)
//│ fact: int -> int
//│ g: ({a: 'a, b: int} & 'a) -> anything -> 'a

// :ts
rec def l (a: int) = l
rec def m (a: int) (b: int) = m
def f: ('c -> 'a as 'a) -> 'c -> int
// recursive types
//│ l: 'l
//│   where
//│     'l :> int -> 'l
//│ m: 'm
//│   where
//│     'm :> int -> int -> 'm
//│ f: 'a -> 'c -> int
//│   where
//│     'a <: 'c -> 'a

// :ts
:e
1: ?
{ a = "hello" }: { a: string } & { b: int }
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.52: 	1: ?
//│ ║        	^
//│ ╟── integer literal of type `1` does not match type `nothing`
//│ ╟── Note: constraint arises from type wildcard:
//│ ║  l.52: 	1: ?
//│ ╙──      	   ^
//│ res: anything
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.53: 	{ a = "hello" }: { a: string } & { b: int }
//│ ║        	^^^^^^^^^^^^^^^
//│ ╟── record literal of type `{$fields: ~{a: nothing}, a: "hello"}` does not have field 'b'
//│ ╟── Note: constraint arises from intersection type:
//│ ║  l.53: 	{ a = "hello" }: { a: string } & { b: int }
//│ ╙──      	                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: {a: string, b: int}

// :ts
def nonsense x y = if x.a == y.b then x y else fun y -> x
def g = fun x -> fun y -> if x == y then x y else y x
// complex types
//│ nonsense: ('a -> 'b & {a: int} & 'c) -> ({b: int} & 'a) -> (anything -> 'c | 'b)
//│ g: (int & 'a -> 'b & 'c) -> (int & 'c -> 'b & 'a) -> 'b

// :ts
def x: int | ~string
def y: "a" | "b" | ~string
// negative types
//│ x: int | ~string
//│ y: "a" | "b" | ~string

// :ts
def cont x = x + 1
def app y k = k (y - 1)
app 2 cont
//│ cont: int -> int
//│ app: int -> (int -> 'a) -> 'a
//│ res: int

// :ts
def g (x, y) = x + y
def h (x, (y, z)) = y z + x
def k (x, (y, z)) (l, (m), (n)) = (m (n + l)) (y (z + x))
def l: ((1, 2), (3, 4)) -> 5
//│ g: (int, int,) -> int
//│ h: (int, ('a -> int, 'a,),) -> int
//│ k: (int, (int -> 'a, int,),) -> (int, int -> 'a -> 'b, int,) -> 'b
//│ l: ((1, 2,), (3, 4,),) -> 5


// :ts
def weird: ((int, int) -> 'a) as 'a
def weird: ('a -> (int, int)) as 'a
def weird: ((int, 'a) as 'a) -> int
def weird: ((int, bool) | 'a) -> 'a
//│ weird: 'a
//│   where
//│     'a :> (int, int,) -> 'a
//│ weird: 'a
//│   where
//│     'a := 'a -> (int, int,)
//│ weird: 'a -> int
//│   where
//│     'a <: (int, 'a,)
//│ weird: ('a | (int, bool,)) -> 'a


